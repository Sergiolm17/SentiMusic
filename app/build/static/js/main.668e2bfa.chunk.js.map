{"version":3,"sources":["hooks/User.js","App.js","serviceWorker.js","index.js"],"names":["spotifyApi","SpotifyWebApi","useAccessToken","params","getHashParams","useState","loggedIn","setloggedIn","useEffect","access_token","setAccessToken","useGetMe","me","setme","getMe","then","user","console","log","useGetNowPlaying","name","albumArt","is_playing","uri","id","nowPlaying","setnowPlaying","current","setcurrent","getCurrent","interval","setInterval","getMyCurrentPlaybackState","response","item","album","images","url","clearInterval","useGetDevice","devices","setdevices","getMyDevices","data","useRecomendation","recomendation","setrecomendation","getRecommendations","limit","market","seed_tracks","tracks","useGetAudio","audiodetail","setaudiodetail","getAudioFeaturesForTrack","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","appurl","App","href","display_name","alt","src","style","height","length","map","device","key","tylie","acousticness","danceability","duration_ms","energy","instrumentalness","liveness","loudness","mode","speechiness","tempo","time_signature","valence","music","indexaudio","artists","controls","preview_url","preload","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.668e2bfa.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nimport SpotifyWebApi from \"spotify-web-api-js\";\r\n\r\nconst spotifyApi = new SpotifyWebApi();\r\n\r\nfunction useAccessToken() {\r\n  const params = getHashParams();\r\n\r\n  const [loggedIn, setloggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (params.access_token) {\r\n      spotifyApi.setAccessToken(params.access_token);\r\n    }\r\n\r\n    setloggedIn(params.access_token ? true : false);\r\n  }, [params.access_token]);\r\n  return loggedIn;\r\n}\r\nconst useGetMe = () => {\r\n  const loggedIn = useAccessToken();\r\n  const [me, setme] = useState({});\r\n  useEffect(() => {\r\n    if (loggedIn) {\r\n      spotifyApi.getMe().then(user => {\r\n        console.log(user);\r\n        setme(user);\r\n      });\r\n    }\r\n  }, [loggedIn]);\r\n  return [me];\r\n};\r\nconst useGetNowPlaying = () => {\r\n  const loggedIn = useAccessToken();\r\n\r\n  const [nowPlaying, setnowPlaying] = useState({\r\n    name: \"\",\r\n    albumArt: \"\",\r\n    is_playing: false,\r\n    uri: \"\",\r\n    id: \"\"\r\n  });\r\n  const [current, setcurrent] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getCurrent();\r\n    const interval = setInterval(() => loggedIn && getCurrent(), 5000);\r\n    function getCurrent() {\r\n      spotifyApi.getMyCurrentPlaybackState().then(response => {\r\n        setcurrent(response ? response.is_playing : false);\r\n        if (response)\r\n          setnowPlaying({\r\n            name: response.item.name,\r\n            albumArt: response.item.album.images[0].url,\r\n            is_playing: response.is_playing,\r\n            uri: response.item.uri,\r\n            id: response.item.id\r\n          });\r\n      });\r\n    }\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [loggedIn]);\r\n\r\n  return [nowPlaying, current];\r\n};\r\n\r\nconst useGetDevice = nowPlaying => {\r\n  const [devices, setdevices] = useState([]);\r\n  useEffect(() => {\r\n    if (nowPlaying.id) {\r\n      spotifyApi.getMyDevices().then(data => setdevices(data.devices));\r\n    }\r\n  }, [nowPlaying.id]);\r\n  return [devices];\r\n};\r\n\r\nconst useRecomendation = nowPlaying => {\r\n  const [recomendation, setrecomendation] = useState([]);\r\n  useEffect(() => {\r\n    if (nowPlaying.id)\r\n      spotifyApi\r\n        .getRecommendations({\r\n          limit: 4,\r\n          market: \"PE\",\r\n          //seed_artists: \"4NHQUGzhtTLFvgF5SZesLK\",\r\n          seed_tracks: nowPlaying.id\r\n          //min_energy: 0.4,\r\n          //min_popularity: 90\r\n        })\r\n        .then(data => setrecomendation(data.tracks));\r\n  }, [nowPlaying.id]);\r\n  return [recomendation];\r\n};\r\nconst useGetAudio = nowPlaying => {\r\n  const [audiodetail, setaudiodetail] = useState({});\r\n  useEffect(() => {\r\n    if (nowPlaying.id) {\r\n      spotifyApi\r\n        .getAudioFeaturesForTrack(nowPlaying.id)\r\n        .then(audiodetail => setaudiodetail(audiodetail));\r\n    }\r\n  }, [nowPlaying.id]);\r\n  return [audiodetail];\r\n};\r\n/*\r\nconst getSearch = () => {\r\n  spotifyApi.search(\"WONDERLAND\", [\"track\"], { market: \"PE\" }).then(device => {\r\n    console.log(device);\r\n  });\r\n};\r\nconst createPlaylist = () => {\r\n  spotifyApi\r\n    .createPlaylist(me.id, {\r\n      name: \"Creado desde el server\",\r\n      public: false,\r\n      description: \"esta lpaylist es la recomendada\"\r\n    })\r\n    .then(device => {\r\n      console.log(device);\r\n    });\r\n};\r\nconst addToPlaylist = () => {\r\n  if (nowPlaying.uri)\r\n    spotifyApi\r\n      .addTracksToPlaylist(\"06sL90oZx5lI8mbaGzlgFD\", [nowPlaying.uri])\r\n      .then(device => {\r\n        console.log(device);\r\n      });\r\n};\r\nconst removeToPlaylist = () => {\r\n  if (nowPlaying.uri)\r\n    spotifyApi\r\n      .removeTracksFromPlaylist(\"06sL90oZx5lI8mbaGzlgFD\", [nowPlaying.uri])\r\n      .then(device => {\r\n        console.log(device);\r\n      });\r\n};\r\n*/\r\nconst getHashParams = () => {\r\n  var hashParams = {};\r\n  var e,\r\n    r = /([^&;=]+)=?([^&;]*)/g,\r\n    q = window.location.hash.substring(1);\r\n  e = r.exec(q);\r\n  while (e) {\r\n    hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    e = r.exec(q);\r\n  }\r\n  return hashParams;\r\n};\r\nexport {\r\n  useAccessToken,\r\n  useGetMe,\r\n  useGetNowPlaying,\r\n  useGetDevice,\r\n  useRecomendation,\r\n  useGetAudio\r\n  /*,\r\n  getSearch,\r\n  createPlaylist,\r\n  addToPlaylist,\r\n  removeToPlaylist\r\n  */\r\n};\r\n/*\r\n\r\n\r\n*/\r\n","import React from \"react\";\n\nimport {\n  useAccessToken,\n  useGetMe,\n  useGetNowPlaying,\n  useGetDevice,\n  useRecomendation,\n  useGetAudio /*\n  ,\n  getRecomendation,\n  getAudio,\n  getSearch,\n  createPlaylist,\n  addToPlaylist,\n  removeToPlaylist*/\n} from \"./hooks/User\";\n\nconst urllocal = \"http://34.68.6.184:4001\";\nconst urlprod = \"http://34.68.6.184:4001\";\nlet appurl =\n  process.env.NODE_ENV === \"production\" ? urlprod : urllocal + \"/login\";\n\nfunction App() {\n  const loggedIn = useAccessToken();\n  const [me] = useGetMe();\n  const [nowPlaying, current] = useGetNowPlaying();\n  const [devices] = useGetDevice(nowPlaying);\n  const [audiodetail] = useGetAudio(nowPlaying);\n  const [recomendation] = useRecomendation(nowPlaying);\n\n  return (\n    <div>\n      {!loggedIn && <a href={appurl}> Login to Spotify </a>}\n      {me.display_name && \"hola \" + me.display_name}\n      {nowPlaying.name && current && (\n        <div>\n          <p>Ahora reproduciendo: {nowPlaying.name}</p>\n          <img\n            alt={nowPlaying.name}\n            src={nowPlaying.albumArt}\n            style={{ height: 300 }}\n          />\n        </div>\n      )}\n      <p>\n        {devices.length > 0 &&\n          \"se encontro \" + devices.length + \" dispositivos\"}\n        {devices.map(device => (\n          <li key={device.id}>\n            {device.name} {device.tylie}\n          </li>\n        ))}\n      </p>\n      <div>\n        acousticness-{audiodetail.acousticness}\n        <p>danceability- {audiodetail.danceability}</p>\n        <p>duration_ms- {audiodetail.duration_ms}</p>\n        <p>energy- {audiodetail.energy}</p>\n        <p>instrumentalness- {audiodetail.instrumentalness}</p>\n        <p>key- {audiodetail.key}</p>\n        <p>liveness- {audiodetail.liveness}</p>\n        <p>loudness- {audiodetail.loudness}</p>\n        <p>duration_ms- {audiodetail.duration_ms}</p>\n        <p>mode- {audiodetail.mode}</p>\n        <p>speechiness- {audiodetail.speechiness}</p>\n        <p>tempo- {audiodetail.tempo}</p>\n        <p>time_signature- {audiodetail.time_signature}</p>\n        <p>valence- {audiodetail.valence}</p>\n      </div>\n      Recomendaciones\n      {recomendation.map((music, indexaudio) => (\n        <div key={music.id}>\n          <p>\n            {music.artists[0].name}-{music.name}\n          </p>\n          <img\n            alt={music.name}\n            src={music.album.images[0].url}\n            style={{ height: 100 }}\n          />\n          <audio controls src={music.preview_url} preload=\"none\">\n            Your browser does not support the\n            <code>audio</code> element.\n          </audio>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n/*\n\n     \n      {loggedIn && (\n        <>\n          <button onClick={() => getSearch()}>Search</button>\n          <button onClick={() => createPlaylist()}>createPlaylist</button>\n        </>\n      )}\n      {nowPlaying.uri && (\n        <>\n          <button onClick={() => getRecomendation()}>Get Recomendacion</button>\n          <button onClick={() => getAudio()}>getAudio</button>\n          <button onClick={() => addToPlaylist()}>addToPlaylist</button>\n          <button onClick={() => removeToPlaylist()}>removeToPlaylist</button>\n        </>\n      )}\n     \n      {devices.map(device => (\n        <p key={device.id}>\n          {device.name} {device.type}\n        </p>\n      ))}\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}