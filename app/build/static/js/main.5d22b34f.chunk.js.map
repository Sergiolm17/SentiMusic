{"version":3,"sources":["files/Happy.svg","files/Sad.svg","files/DOMO.svg","files/Logo.svg","components/card.jsx","components/ahref.jsx","components/emoji.jsx","components/who.jsx","components/list.jsx","hooks/service.js","hooks/data.js","hooks/User.js","pages/recomendation.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","children","normal","className","href","newtab","target","state","onClick","src","Happy","Sad","alt","WhoStyle","margin","name","artist","style","preview_url","valence","useState","disabled","setdisabled","height","controls","preload","getHashParams","SpotifyWebApi","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","urlprod","appurl","spotifyApi","useGetMe","me","setme","useEffect","getMe","then","user","useGetNowPlaying","albumArt","is_playing","uri","id","nowPlaying","setnowPlaying","current","setcurrent","error","setError","getCurrent","interval","setInterval","getMyCurrentPlaybackState","err","response","clearInterval","console","item","currently_playing_type","album","images","url","artists","useCallsaveData","musicsaved","setmusicsaved","getMySavedTracks","limit","offset","market","data","newdata","items","map","track","useCreatePlaylist","playlist","setplaylist","exist","setexist","getUserPlaylists","device","length","cock_playlist","document","cookie","split","a","dat","find","o","obj","localStorage","setItem","useGetPlaylist","playlist_id","setplaylist_id","log","getItem","getPlaylist","createPlaylist","public","collaborative","description","imgStyle","recomendation","setrecomendation","join","seed_tracks","setseed_tracks","getRecommendations","min_valence","max_valence","tracks","useRecomendation","titlePlaylist","display","gridTemplateColumns","alignItems","external_urls","spotify","music","indexaudio","key","addTracksToPlaylist","play","alert","addtoPlaylist","App","loggedIn","params","setloggedIn","access_token","refresh_token","setAccessToken","useAccessToken","setState","Domo","Logo","textAlign","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d22b34f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Happy.d51ce461.svg\";","module.exports = __webpack_public_path__ + \"static/media/Sad.28aa5087.svg\";","module.exports = __webpack_public_path__ + \"static/media/DOMO.554d941c.svg\";","module.exports = __webpack_public_path__ + \"static/media/Logo.75f61d59.svg\";","import React from \"react\";\r\nimport \"./card.scss\";\r\nexport default ({ children, normal }) => {\r\n  return <div className={`card ${normal && \"normal\"}`}>{children}</div>;\r\n};\r\n","import React from \"react\";\r\nimport \"./href.scss\";\r\nexport default ({ children, href, newtab }) => {\r\n  return (\r\n    <a href={href} target={newtab ? \"_blank\" : \"_self\"} className=\"button-domo\">\r\n      {children}\r\n    </a>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Happy from \"../files/Happy.svg\";\r\nimport Sad from \"../files/Sad.svg\";\r\nimport \"./Emoji.scss\";\r\n\r\nexport default ({ state, onClick }) => {\r\n  return (\r\n    <button className=\"buttonStyle\" onClick={onClick}>\r\n      <img\r\n        src={state ? Happy : Sad}\r\n        alt={state ? \"Happy\" : \"Sad\"}\r\n        className=\"EmojiStyle\"\r\n      ></img>\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./who.scss\";\r\nconst WhoStyle = {\r\n  margin: \"10px\"\r\n};\r\nexport default ({ name, artist }) => {\r\n  return (\r\n    <div style={WhoStyle}>\r\n      <h2>{name} </h2>\r\n      <h3>{artist}</h3>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./list.scss\";\r\nexport default ({ artist, name, src, preview_url, valence, onClick }) => {\r\n  const [disabled, setdisabled] = useState(false);\r\n  const click = () => {\r\n    setdisabled(true);\r\n    onClick();\r\n  };\r\n  if (!preview_url) return \"\";\r\n  return (\r\n    <div className=\"list-container\">\r\n      <div>\r\n        <img alt={name} src={src} style={{ height: \"50px\" }} />\r\n      </div>\r\n      <div className=\"list-who\">\r\n        <span className=\"list-name\">{name}</span>\r\n        <span className=\"list-artist\">{artist}</span>\r\n      </div>\r\n      <div className=\"list-valence\">\r\n        <span className=\"valence\">{valence}</span>\r\n      </div>\r\n      <div\r\n        className={`list-audio ${disabled ? \"active-audio\" : \"disabled-audio\"}`}\r\n      >\r\n        <audio controls={true} src={preview_url} preload=\"none\">\r\n          Your browser does not support the\r\n          <code>audio</code> element.\r\n        </audio>\r\n      </div>\r\n      {!disabled && (\r\n        <button disabled={disabled} className=\"add-music\" onClick={click}>\r\n          ADD\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n/*\r\n  <div>\r\n        <audio controls={true} src={preview_url} preload=\"none\">\r\n          Your browser does not support the\r\n          <code>audio</code> element.\r\n        </audio>\r\n      </div>\r\n\r\n*/\r\n","import { useState, useEffect } from \"react\";\r\nimport SpotifyWebApi from \"spotify-web-api-js\";\r\nconst spotifyApi = new SpotifyWebApi();\r\n\r\nconst getHashParams = () => {\r\n  var hashParams = {};\r\n  var e,\r\n    r = /([^&;=]+)=?([^&;]*)/g,\r\n    q = window.location.hash.substring(1);\r\n  e = r.exec(q);\r\n  while (e) {\r\n    hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    e = r.exec(q);\r\n  }\r\n\r\n  return hashParams;\r\n};\r\nconst useGetDevice = nowPlaying => {\r\n  const [devices, setdevices] = useState([]);\r\n  useEffect(() => {\r\n    if (nowPlaying.id) {\r\n      spotifyApi.getMyDevices().then(data => setdevices(data.devices));\r\n    }\r\n  }, [nowPlaying.id]);\r\n  return [devices];\r\n};\r\n\r\nexport { getHashParams, useGetDevice };\r\n","const urllocal = \"http://34.68.6.184:4001\";\r\nconst urlprod = \"https://sentimusic.herokuapp.com\";\r\n\r\nlet appurl =\r\n  process.env.NODE_ENV === \"production\"\r\n    ? urlprod + \"/login\"\r\n    : urllocal + \"/login\";\r\nlet appurl_refresh =\r\n  process.env.NODE_ENV === \"production\"\r\n    ? urlprod + \"/refresh_token?\"\r\n    : urllocal + \"/refresh_token?\";\r\n\r\nexport { appurl, appurl_refresh };\r\n","import { useState, useEffect } from \"react\";\r\nimport { getHashParams, useGetDevice } from \"./service\";\r\nimport { appurl /*, appurl_refresh */ } from \"./data\";\r\nimport SpotifyWebApi from \"spotify-web-api-js\";\r\n//var querystring = require(\"querystring\");\r\n\r\nconst spotifyApi = new SpotifyWebApi();\r\n\r\nfunction useAccessToken() {\r\n  const params = getHashParams();\r\n  const [loggedIn, setloggedIn] = useState(false);\r\n  const [access_token /*, setaccess_token*/] = useState(\r\n    localStorage.getItem(\"access_token\") || params.access_token || \"\"\r\n  );\r\n  const [refresh_token /*, setRefresh_token*/] = useState(\r\n    localStorage.getItem(\"refresh_token\") || params.refresh_token || \"\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    /*\r\n    if (refresh_token)\r\n      fetch(\r\n        appurl_refresh +\r\n          querystring.stringify({\r\n            refresh_token\r\n          })\r\n      )\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          //console.log(data);\r\n          setaccess_token(data.access_token);\r\n          localStorage.setItem(\"access_token\", data.access_token);\r\n        }); //localStorage.removeItem(\"refresh_token\");\r\n        */\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (access_token) {\r\n      spotifyApi.setAccessToken(access_token);\r\n      localStorage.setItem(\"access_token\", access_token);\r\n    }\r\n    if (refresh_token) {\r\n      localStorage.setItem(\"refresh_token\", refresh_token);\r\n    }\r\n    setloggedIn(access_token ? true : false);\r\n  }, [access_token, refresh_token]);\r\n  return loggedIn;\r\n}\r\nconst useGetMe = () => {\r\n  const [me, setme] = useState({});\r\n  useEffect(() => {\r\n    spotifyApi.getMe().then(user => {\r\n      //console.log(user);\r\n      setme(user);\r\n    });\r\n  }, []);\r\n  return [me];\r\n};\r\nconst useGetNowPlaying = () => {\r\n  const [nowPlaying, setnowPlaying] = useState({\r\n    name: \"\",\r\n    artist: \"\",\r\n    albumArt: \"\",\r\n    is_playing: false,\r\n    uri: \"\",\r\n    id: \"\"\r\n  });\r\n  const [current, setcurrent] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getCurrent();\r\n    const interval = setInterval(() => getCurrent(), 3000);\r\n    function getCurrent() {\r\n      spotifyApi.getMyCurrentPlaybackState((err, response) => {\r\n        if (err) {\r\n          setError(true);\r\n          clearInterval(interval);\r\n          console.error(err);\r\n        } else {\r\n          setError(false);\r\n          setcurrent(response ? response.is_playing : false);\r\n\r\n          if (response.item && response.currently_playing_type !== \"episode\") {\r\n            setnowPlaying({\r\n              name: response.item.name,\r\n              albumArt: response.item.album.images[0].url,\r\n              is_playing: response.is_playing,\r\n              uri: response.item.uri,\r\n              id: response.item.id,\r\n              artist: response.item.artists[0].name\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return [nowPlaying, error, current];\r\n};\r\n\r\nconst useRecomendation = (nowPlaying, state) => {\r\n  const [recomendation, setrecomendation] = useState([]);\r\n  const [musicsaved] = useCallsaveData();\r\n  const [seed_tracks, setseed_tracks] = useState(\r\n    `${musicsaved.join(\",\")}${nowPlaying.id ? \",\" + nowPlaying.id : \"\"}`\r\n  );\r\n  useEffect(() => {\r\n    setseed_tracks(\r\n      `${musicsaved.join(\",\")}${nowPlaying.id ? \",\" + nowPlaying.id : \"\"}`\r\n    );\r\n  }, [nowPlaying, musicsaved]);\r\n  useEffect(() => {\r\n    console.log(seed_tracks);\r\n\r\n    if (seed_tracks /* && state !== 0*/) {\r\n      spotifyApi\r\n        .getRecommendations({\r\n          limit: 15,\r\n          market: \"PE\",\r\n          //seed_artists: \"4NHQUGzhtTLFvgF5SZesLK\",\r\n          seed_tracks,\r\n\r\n          //min_energy: 0.9,\r\n          min_valence: state === 0 ? 0 : state === 1 ? 0.5 : 0,\r\n          max_valence: state === 0 ? 1 : state === 1 ? 1 : 0.5\r\n          //popularity: 0.9\r\n        })\r\n        .then(data => {\r\n          setrecomendation(data.tracks);\r\n        });\r\n    }\r\n  }, [state, seed_tracks /*, nowPlaying.id*/]);\r\n  return [recomendation];\r\n};\r\nconst useCallsaveData = () => {\r\n  const [musicsaved, setmusicsaved] = useState([]);\r\n  useEffect(() => {\r\n    spotifyApi\r\n      .getMySavedTracks({ limit: 4, offset: 0, market: \"PE\" })\r\n      .then(data => {\r\n        /*\r\n        const parsedata = data.items.map(item => {\r\n          return { added_at: item.added_at, ...item.track };\r\n        });*/\r\n        const newdata = data.items.map(item => item.track.id);\r\n        setmusicsaved(newdata);\r\n      });\r\n  }, []);\r\n  return [musicsaved];\r\n};\r\n\r\nconst useGetAudio = nowPlaying => {\r\n  const [audiodetail, setaudiodetail] = useState({});\r\n  useEffect(() => {\r\n    if (nowPlaying.id) {\r\n      spotifyApi\r\n        .getAudioFeaturesForTrack(nowPlaying.id)\r\n        .then(audiodetail => setaudiodetail(audiodetail));\r\n    }\r\n  }, [nowPlaying.id]);\r\n  return [audiodetail];\r\n};\r\nconst useGetPlaylist = () => {\r\n  const [me] = useGetMe();\r\n  const [playlist, setplaylist] = useState([]);\r\n  const [exist, setexist] = useState(0);\r\n  useEffect(() => {\r\n    if (me) {\r\n      spotifyApi.getUserPlaylists(me.id, { limit: 50 }).then(device => {\r\n        setplaylist(device.items);\r\n      });\r\n    }\r\n  }, [me]);\r\n\r\n  useEffect(() => {\r\n    if (playlist.length > 0) {\r\n      var read_cookies = document.cookie;\r\n      var split_read_cookie = read_cookies.split(\";\");\r\n      var parse = split_read_cookie.map(a => {\r\n        let dat = a.split(\"=\");\r\n        return { name: dat[0], data: dat[1] };\r\n      });\r\n      let cock_playlist = parse.find(o => o.name === \" playlist_id\");\r\n\r\n      let obj = playlist.find(o => o.name === \"Domo Playlist\");\r\n      setexist(obj ? 1 : 2);\r\n      if (obj) localStorage.setItem(\"playlist_id\", obj.id);\r\n      if (cock_playlist)\r\n        localStorage.setItem(\"playlist_id\", cock_playlist.data);\r\n    }\r\n    //console.log(playlist);\r\n  }, [me.id, playlist]);\r\n  return [exist];\r\n};\r\nconst useCreatePlaylist = () => {\r\n  const [me] = useGetMe();\r\n  const [exist] = useGetPlaylist();\r\n  const [playlist_id, setplaylist_id] = useState({});\r\n\r\n  useEffect(() => {\r\n    if ((!me.id && exist !== 2) || exist === 1)\r\n      return console.log(\"esperando usuario\");\r\n\r\n    if (localStorage.getItem(\"playlist_id\"))\r\n      spotifyApi\r\n        .getPlaylist(localStorage.getItem(\"playlist_id\"))\r\n        .then(a => setplaylist_id(a));\r\n    else\r\n      spotifyApi\r\n        .createPlaylist(me.id, {\r\n          name: \"Domo Playlist\",\r\n          public: false,\r\n          collaborative: true,\r\n          description: \"Playlist de musica Recomendada\"\r\n        })\r\n        .then(device => {\r\n          localStorage.setItem(\"playlist_id\", device.id);\r\n          setplaylist_id(device);\r\n        });\r\n  }, [me.id, exist]);\r\n\r\n  return [playlist_id];\r\n};\r\nfunction addtoPlaylist(playlist_id, uri) {\r\n  console.log(playlist_id, uri);\r\n  spotifyApi.addTracksToPlaylist(playlist_id, [uri]).then(device => {\r\n    console.log(device);\r\n    spotifyApi.play();\r\n    alert(\"Se añadio con exito\");\r\n  });\r\n}\r\n/*\r\nfunction salir(params) {\r\n  localStorage.removeItem(\"access_token\");\r\n  localStorage.removeItem(\"refresh_token\");\r\n  localStorage.removeItem(\"playlist_id\");\r\n  document.cookie = \"playlist_id\" + \"=; Max-Age=0\";\r\n}\r\n\r\nfunction getAudioFeaturesForTrack(data) {\r\n  const tracks = [];\r\n  data.map(track => {\r\n    spotifyApi.getAudioFeaturesForTrack(track.id, (err, audiodetail) => {\r\n      console.log(Object.assign({}, track, audiodetail));\r\n      tracks.push(Object.assign({}, track, audiodetail));\r\n      return Object.assign({}, track, audiodetail);\r\n    });\r\n  });\r\n  \r\n  if (data.length === tracks.length) return tracks;\r\n  else return data;\r\n}\r\n*/\r\n/*\r\nconst getSearch = () => {\r\n  spotifyApi.search(\"WONDERLAND\", [\"track\"], { market: \"PE\" }).then(device => {\r\n    console.log(device);\r\n  });\r\n};\r\nconst createPlaylist = () => {\r\n  spotifyApi\r\n    .createPlaylist(me.id, {\r\n      name: \"Creado desde el server\",\r\n      public: false,\r\n      description: \"esta lpaylist es la recomendada\"\r\n    })\r\n    .then(device => {\r\n      console.log(device);\r\n    });\r\n};\r\nconst addToPlaylist = () => {\r\n  if (nowPlaying.uri)\r\n    spotifyApi\r\n      .addTracksToPlaylist(\"06sL90oZx5lI8mbaGzlgFD\", [nowPlaying.uri])\r\n      .then(device => {\r\n        console.log(device);\r\n      });\r\n};\r\nconst removeToPlaylist = () => {\r\n  if (nowPlaying.uri)\r\n    spotifyApi\r\n      .removeTracksFromPlaylist(\"06sL90oZx5lI8mbaGzlgFD\", [nowPlaying.uri])\r\n      .then(device => {\r\n        console.log(device);\r\n      });\r\n};\r\n*/\r\n\r\nexport {\r\n  appurl,\r\n  useAccessToken,\r\n  useGetMe,\r\n  useGetNowPlaying,\r\n  useGetDevice,\r\n  useGetAudio,\r\n  useRecomendation,\r\n  addtoPlaylist,\r\n  useGetPlaylist,\r\n  useCreatePlaylist\r\n  /*,\r\n  getSearch,\r\n  createPlaylist,\r\n  addToPlaylist,\r\n  removeToPlaylist\r\n  */\r\n};\r\n/*\r\n\r\n\r\n*/\r\n","import React from \"react\";\r\nimport Card from \"../components/card\";\r\nimport List from \"../components/list\";\r\nimport Link from \"../components/ahref\";\r\nimport {\r\n  useRecomendation,\r\n  addtoPlaylist,\r\n  useCreatePlaylist\r\n} from \"../hooks/User\";\r\nconst imgStyle = {\r\n  margin: \"20px\"\r\n};\r\nexport default ({ nowPlaying, state }) => {\r\n  const [playlist_id] = useCreatePlaylist();\r\n\r\n  const [recomendation] = useRecomendation(nowPlaying, state);\r\n\r\n  const titlePlaylist = (\r\n    <h2>\r\n      {state === 0\r\n        ? \"Playlist automatica\"\r\n        : state === 1\r\n        ? \"Playlist Feliz\"\r\n        : \"Modo Sad\"}\r\n    </h2>\r\n  );\r\n\r\n  return (\r\n    <Card normal>\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"auto 40%\",\r\n          alignItems: \"center\"\r\n        }}\r\n      >\r\n        {titlePlaylist}\r\n        {playlist_id.external_urls && (\r\n          <Link href={playlist_id.external_urls.spotify} style={imgStyle}>\r\n            Ir a la playlist creada\r\n          </Link>\r\n        )}\r\n      </div>\r\n      {recomendation.map((music, indexaudio) => (\r\n        <List\r\n          key={music.id}\r\n          artist={music.artists[0].name}\r\n          name={music.name}\r\n          src={music.album.images[0].url}\r\n          preview_url={music.preview_url}\r\n          valence={music.valence}\r\n          onClick={() => addtoPlaylist(playlist_id.id, music.uri)}\r\n        ></List>\r\n      ))}\r\n    </Card>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Card from \"./components/card\";\nimport Link from \"./components/ahref\";\nimport Emoji from \"./components/emoji\";\n/*\nimport Title from \"./components/title\";\nimport Cover from \"./components/cover\";\n*/\nimport Who from \"./components/who\";\nimport Domo from \"./files/DOMO.svg\";\nimport Logo from \"./files/Logo.svg\";\nimport Recomendation from \"./pages/recomendation\";\nimport { appurl, useGetNowPlaying, useAccessToken } from \"./hooks/User\";\n\nconst imgStyle = {\n  margin: \"20px\"\n};\nfunction App() {\n  //const [playlist_id] = useCreatePlaylist();\n\n  const loggedIn = useAccessToken();\n  const [state, setState] = useState(0);\n  const [nowPlaying, error] = useGetNowPlaying();\n\n  /// const [devices] = useGetDevice(nowPlaying);\n  //const [audiodetail] = useGetAudio(nowPlaying);\n\n  //const recomendationPlus = useRecomendationPlus(state);\n\n  /*\n  const recomendacionPlus = recomendationPlus.map((music, indexaudio) => (\n    <List\n      key={music.id}\n      artist={music.artists[0].name}\n      name={music.name}\n      src={music.album.images[0].url}\n      preview_url={music.preview_url}\n      valence={music.valence}\n    />\n  ));\n  console.log(!loggedIn, error);\n  */\n\n  if (!loggedIn || error) {\n    return (\n      <div className=\"App-header\">\n        <Card>\n          <p>\n            <img src={Domo} alt=\"texto\" style={imgStyle}></img>\n          </p>\n          <p>\n            <img src={Logo} alt=\"Logo Domo\" style={imgStyle}></img>\n          </p>\n          <Link href={appurl} style={imgStyle}>\n            Iniciar sesion con spotify\n          </Link>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App-header\">\n      {nowPlaying.name && (\n        <Card normal>\n          <h3 style={{ textAlign: \"left\" }}>Ahora reproduciendo:</h3>\n          <Who name={nowPlaying.name} artist={`${nowPlaying.artist} `}></Who>\n        </Card>\n      )}\n      <Card>\n        <h2>¿Como te quieres sentir ?</h2>\n        <Emoji onClick={() => setState(1)} state={true}></Emoji>\n        <Emoji onClick={() => setState(2)} state={false}></Emoji>\n      </Card>\n\n      <Recomendation nowPlaying={nowPlaying} state={state} />\n    </div>\n  );\n}\n/*\n  return (\n    <div className=\"App-header\">\n      {nowPlaying.name && loggedIn ? (\n        <Title>Ahora reproduciendo</Title>\n      ) : (\n        <>\n          <Card>\n            <p className=\"Title\">Ponle play para recomendarte</p>\n          </Card>\n        </>\n      )}\n    </div>\n  );\n}\n*/\nexport default App;\n/*\n{nowPlaying.name && !current && (\n        <Card normal>\n          <p className=\"Title\">Ponle play para recomendarte</p>\n          <Who\n            name={nowPlaying.name}\n            artist={`${nowPlaying.artist}  ${audiodetail.valence}`}\n          ></Who>\n        </Card>\n      )}\n      {nowPlaying.name && current && (\n        <Card normal>\n          <Cover nowPlaying={nowPlaying}></Cover>\n          <Who\n            name={nowPlaying.name}\n            artist={`${nowPlaying.artist} ${audiodetail.valence}`}\n          ></Who>\n        </Card>\n      )}\n      {nowPlaying.name && (\n        <Card>\n          <h2>¿Como te quieres sentir ?</h2>\n          <Emoji onClick={() => setState(1)} state={true}></Emoji>\n          <Emoji onClick={() => setState(2)} state={false}></Emoji>\n        </Card>\n      )}\n*/\n/*\n <Card>\n        <Slider min={0} max={1} defaultValue={1} handle={handle} step={0.2} />\n      </Card>\n      <CircularProgressbar\n        value={percentage}\n        className=\"progress\"\n        styles={buildStyles({\n          rotation: 0.25,\n          strokeLinecap: \"round\",\n          pathTransitionDuration: 0.5,\n\n          pathColor: `#F27A54`,\n          trailColor: \"transparent\"\n        })}\n      ></CircularProgressbar>\n\n        {me.display_name && \"hola \" + me.display_name}\n\n        {devices.length > 0 &&\n          \"se encontro \" + devices.length + \" dispositivos\"}\n        {devices.map(device => (\n          <li key={device.id}>\n            {device.name} {device.tylie}\n          </li>\n        ))}\n   <p>acousticness- {audiodetail.acousticness}</p>\n\n            <p>danceability- {audiodetail.danceability}</p>\n            <p>duration_ms- {audiodetail.duration_ms}</p>\n            <p>energy- {audiodetail.energy}</p>\n            <p>instrumentalness- {audiodetail.instrumentalness}</p>\n            <p>key- {audiodetail.key}</p>\n            <p>liveness- {audiodetail.liveness}</p>\n            <p>loudness- {audiodetail.loudness}</p>\n            <p>duration_ms- {audiodetail.duration_ms}</p>\n            <p>mode- {audiodetail.mode}</p>\n            <p>speechiness- {audiodetail.speechiness}</p>\n            <p>tempo- {audiodetail.tempo}</p>\n            <p>time_signature- {audiodetail.time_signature}</p>\n            <p>valence- {audiodetail.valence}</p>\n\n\n     \n      {loggedIn && (\n        <>\n          <button onClick={() => getSearch()}>Search</button>\n          <button onClick={() => createPlaylist()}>createPlaylist</button>\n        </>\n      )}\n      {nowPlaying.uri && (\n        <>\n          <button onClick={() => getRecomendation()}>Get Recomendacion</button>\n          <button onClick={() => getAudio()}>getAudio</button>\n          <button onClick={() => addToPlaylist()}>addToPlaylist</button>\n          <button onClick={() => removeToPlaylist()}>removeToPlaylist</button>\n        </>\n      )}\n     \n      {devices.map(device => (\n        <p key={device.id}>\n          {device.name} {device.type}\n        </p>\n      ))}\n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"34.68.6.184\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}