{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["spotifyApi","SpotifyWebApi","getHashParams","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","App","useState","params","loggedIn","setloggedIn","name","albumArt","nowPlaying","setnowPlaying","useEffect","token","access_token","console","log","setAccessToken","href","src","style","height","onClick","getMyCurrentPlaybackState","then","response","item","album","images","url","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qLAEMA,EAAa,I,OAAIC,GA6CvB,IAAMC,EAAgB,WACpB,IACIC,EADAC,EAAa,GAEfC,EAAI,uBACJC,EAAIC,OAAOC,SAASC,KAAKC,UAAU,GAErC,IADAP,EAAIE,EAAEM,KAAKL,GACJH,GACLC,EAAWD,EAAE,IAAMS,mBAAmBT,EAAE,IACxCA,EAAIE,EAAEM,KAAKL,GAEb,OAAOF,GAEMS,EAvDf,WAAgB,IAAD,EACeC,mBAASZ,KADxB,mBACNa,EADM,aAEmBD,oBAAS,IAF5B,mBAENE,EAFM,KAEIC,EAFJ,OAGuBH,mBAAS,CAC3CI,KAAM,cACNC,SAAU,KALC,mBAGNC,EAHM,KAGMC,EAHN,KA2Bb,OAnBAC,oBAAU,WACR,IAAMC,EAAQR,EAAOS,aACrBC,QAAQC,IAAIH,GAERA,GACFvB,EAAW2B,eAAeJ,GAE5BN,IAAYM,IACX,CAACR,EAAOS,eAYT,6BACGR,EACC,4CAEA,uBAAGY,KAAK,iCAAR,sBAEF,6BACE,yBAAKC,IAAKT,EAAWD,SAAUW,MAAO,CAAEC,OAAQ,QAEjDf,GACC,4BAAQgB,QAAS,WApBrBhC,EAAWiC,4BAA4BC,KAAK,SAAAC,GAC1CV,QAAQC,IAAIS,GAEZd,EAAc,CACZH,KAAMiB,EAASC,KAAKlB,KACpBC,SAAUgB,EAASC,KAAKC,MAAMC,OAAO,GAAGC,UAexC,uBC9BYC,QACW,cAA7BjC,OAAOC,SAASiC,UAEe,UAA7BlC,OAAOC,SAASiC,UAEhBlC,OAAOC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,KAAK,SAAAgB,GACjCA,EAAaC,gB","file":"static/js/main.1484d77b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nconst spotifyApi = new SpotifyWebApi();\n\nfunction App() {\n  const [params, setparams] = useState(getHashParams());\n  const [loggedIn, setloggedIn] = useState(false);\n  const [nowPlaying, setnowPlaying] = useState({\n    name: \"Not Checked\",\n    albumArt: \"\"\n  });\n\n  useEffect(() => {\n    const token = params.access_token;\n    console.log(token);\n\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    setloggedIn(token ? true : false);\n  }, [params.access_token]);\n  const getNowPlaying = () => {\n    spotifyApi.getMyCurrentPlaybackState().then(response => {\n      console.log(response);\n\n      setnowPlaying({\n        name: response.item.name,\n        albumArt: response.item.album.images[0].url\n      });\n    });\n  };\n  return (\n    <div>\n      {loggedIn ? (\n        \"se conecto tu cuenta de spotify con exito\"\n      ) : (\n        <a href=\"http://34.68.6.184:4001/login\"> Login to Spotify </a>\n      )}\n      <div>\n        <img src={nowPlaying.albumArt} style={{ height: 150 }} />\n      </div>\n      {loggedIn && (\n        <button onClick={() => getNowPlaying()}>Check Now Playing</button>\n      )}\n    </div>\n  );\n}\nconst getHashParams = () => {\n  var hashParams = {};\n  var e,\n    r = /([^&;=]+)=?([^&;]*)/g,\n    q = window.location.hash.substring(1);\n  e = r.exec(q);\n  while (e) {\n    hashParams[e[1]] = decodeURIComponent(e[2]);\n    e = r.exec(q);\n  }\n  return hashParams;\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}