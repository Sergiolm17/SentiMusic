{"version":3,"sources":["Firebase.js","services/firebase_service.js","hooks/service.js","hooks/data.js","hooks/User.js","components/card.jsx","components/ahref.jsx","files/Happy.svg","files/Sad.svg","files/Cool.svg","files/DOMO.svg","files/Logo.svg","components/emoji.jsx","components/cover.jsx","components/who.jsx","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","db","firestore","getUserData","user","returnUser","id","docRef","collection","doc","get","then","exists","data","set","console","log","updateData","functionReturn","merge","catch","error","PostTransition","from","to","add","date","Date","getHashParams","SpotifyWebApi","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","urlprod","appurl","spotifyApi","useAccessToken","params","useState","loggedIn","setloggedIn","localStorage","getItem","access_token","refresh_token","useEffect","setAccessToken","setItem","useGetMe","me","setme","getMe","useGetNowPlaying","name","artist","albumArt","is_playing","uri","nowPlaying","setnowPlaying","current","setcurrent","setError","getCurrent","interval","setInterval","getMyCurrentPlaybackState","err","response","clearInterval","removeItem","item","currently_playing_type","album","images","url","artists","useRecomendation","state","genre","recomendation","setrecomendation","useCallsaveData","musicsaved","finalOptions","length","seed_tracks_","join","seed_tracks","seed_tracks_fun","min_valence","max_valence","valence","seed_genres","genreSwitch","getRecommendations","limit","market","tracks","setmusicsaved","getMySavedTracks","offset","newdata","items","map","track","useCreatePlaylist","playlist_id","setplaylist_id","playlist","setplaylist","getPlaylist","dataGet","body","createPlaylist","public","collaborative","description","device","addtoPlaylist","addTracksToPlaylist","play","alert","children","normal","className","href","newtab","button","onClick","target","module","exports","src","Happy","Sad","Cool","emoji","alt","coverStyle","boxShadow","height","style","WhoStyle","margin","imgStyle","Recomendation","lazy","App","setState","now","setNow","Domo","Logo","textAlign","fallback","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.426ac856.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\n\r\n//import \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n//import \"firebase/messaging\";\r\n//import \"firebase/storage\";\r\n//import 'firebase/performance';\r\n//onst settings = { timestampsInSnapshots: true };\r\nconst devConfig = {\r\n  apiKey: \"AIzaSyALTJda55N9Xs_i-dQ5V5BWyR37cU3CMDA\",\r\n  authDomain: \"domo-music.firebaseapp.com\",\r\n  databaseURL: \"https://domo-music.firebaseio.com\",\r\n  projectId: \"domo-music\",\r\n  storageBucket: \"domo-music.appspot.com\",\r\n  messagingSenderId: \"550634181029\",\r\n  appId: \"1:550634181029:web:5f28c1b8216991d346184c\"\r\n};\r\nconst prodConfig = {\r\n  apiKey: \"AIzaSyALTJda55N9Xs_i-dQ5V5BWyR37cU3CMDA\",\r\n  authDomain: \"domo-music.firebaseapp.com\",\r\n  databaseURL: \"https://domo-music.firebaseio.com\",\r\n  projectId: \"domo-music\",\r\n  storageBucket: \"domo-music.appspot.com\",\r\n  messagingSenderId: \"550634181029\",\r\n  appId: \"1:550634181029:web:5f28c1b8216991d346184c\"\r\n};\r\n\r\nconst config = process.env.NODE_ENV === \"production\" ? prodConfig : devConfig;\r\n\r\nfirebase.initializeApp(config);\r\n//firebase.auth().useDeviceLanguage();\r\n//firebase.auth().settings.appVerificationDisabledForTesting = true;\r\n\r\n//export var perf = firebase.performance();\r\n\r\n//firebase.firestore().settings(settings);\r\nexport default firebase;\r\n","import firebase from \"../Firebase\";\r\nconst db = firebase.firestore();\r\nfunction getUserData(user, returnUser) {\r\n  if (user.id) {\r\n    var docRef = db.collection(\"users\").doc(user.id);\r\n    docRef.get().then(function(doc) {\r\n      if (doc.exists) {\r\n        returnUser(doc.data());\r\n      } else {\r\n        docRef.set({\r\n          ...user\r\n        });\r\n        // doc.data() will be undefined in this case\r\n        console.log(\"No such document!\");\r\n        returnUser(user, \"No such document!\");\r\n      }\r\n    });\r\n  } else {\r\n    returnUser(null, \"Not receive user\");\r\n  }\r\n}\r\nfunction updateData(user, data, functionReturn) {\r\n  if (user) {\r\n    console.log(user);\r\n\r\n    var docRef = db.collection(\"users\").doc(user.id);\r\n    docRef\r\n      .set(data, { merge: true })\r\n      .then(() => {\r\n        functionReturn(data);\r\n      })\r\n      .catch(function(error) {\r\n        functionReturn(null, error);\r\n      });\r\n  } else {\r\n    functionReturn(null, \"No such user!\");\r\n  }\r\n}\r\nfunction PostAccion(user, accion) {\r\n  firebase\r\n    .firestore()\r\n    .collection(\"actions\")\r\n    .add({\r\n      user,\r\n      accion,\r\n      date: new Date()\r\n    });\r\n}\r\nfunction PostTransition(user, from, to) {\r\n  firebase\r\n    .firestore()\r\n    .collection(\"transition\")\r\n    .add({\r\n      user: user.id,\r\n      from,\r\n      to,\r\n      date: new Date()\r\n    });\r\n}\r\nexport { getUserData, updateData, PostAccion, PostTransition };\r\n","import { useState, useEffect } from \"react\";\r\nimport SpotifyWebApi from \"spotify-web-api-js\";\r\nconst spotifyApi = new SpotifyWebApi();\r\n\r\nconst getHashParams = () => {\r\n  var hashParams = {};\r\n  var e,\r\n    r = /([^&;=]+)=?([^&;]*)/g,\r\n    q = window.location.hash.substring(1);\r\n  e = r.exec(q);\r\n  while (e) {\r\n    hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    e = r.exec(q);\r\n  }\r\n\r\n  return hashParams;\r\n};\r\nconst useGetDevice = nowPlaying => {\r\n  const [devices, setdevices] = useState([]);\r\n  useEffect(() => {\r\n    if (nowPlaying.id) {\r\n      spotifyApi.getMyDevices().then(data => setdevices(data.devices));\r\n    }\r\n  }, [nowPlaying.id]);\r\n  return [devices];\r\n};\r\n\r\nexport { getHashParams, useGetDevice };\r\n","//const urllocal = \"http://34.68.6.184:4001\";\r\nconst urllocal = \"https://us-central1-domo-music.cloudfunctions.net/app\";\r\nconst urlprod = \"https://us-central1-domo-music.cloudfunctions.net/app\";\r\n\r\nlet appurl =\r\n  process.env.NODE_ENV === \"production\"\r\n    ? urlprod + \"/login\"\r\n    : urllocal + \"/login\";\r\nlet appurl_refresh =\r\n  process.env.NODE_ENV === \"production\"\r\n    ? urlprod + \"/refresh_token?\"\r\n    : urllocal + \"/refresh_token?\";\r\nlet genre = [\r\n  \"acoustic\",\r\n  \"afrobeat\",\r\n  \"alt-rock\",\r\n  \"alternative\",\r\n  \"ambient\",\r\n  \"anime\",\r\n  \"black-metal\",\r\n  \"bluegrass\",\r\n  \"blues\",\r\n  \"bossanova\",\r\n  \"brazil\",\r\n  \"breakbeat\",\r\n  \"british\",\r\n  \"cantopop\",\r\n  \"chicago-house\",\r\n  \"children\",\r\n  \"chill\",\r\n  \"classical\",\r\n  \"club\",\r\n  \"comedy\",\r\n  \"country\",\r\n  \"dance\",\r\n  \"dancehall\",\r\n  \"death-metal\",\r\n  \"deep-house\",\r\n  \"detroit-techno\",\r\n  \"disco\",\r\n  \"disney\",\r\n  \"drum-and-bass\",\r\n  \"dub\",\r\n  \"dubstep\",\r\n  \"edm\",\r\n  \"electro\",\r\n  \"electronic\",\r\n  \"emo\",\r\n  \"folk\",\r\n  \"forro\",\r\n  \"french\",\r\n  \"funk\",\r\n  \"garage\",\r\n  \"german\",\r\n  \"gospel\",\r\n  \"goth\",\r\n  \"grindcore\",\r\n  \"groove\",\r\n  \"grunge\",\r\n  \"guitar\",\r\n  \"happy\",\r\n  \"hard-rock\",\r\n  \"hardcore\",\r\n  \"hardstyle\",\r\n  \"heavy-metal\",\r\n  \"hip-hop\",\r\n  \"holidays\",\r\n  \"honky-tonk\",\r\n  \"house\",\r\n  \"idm\",\r\n  \"indian\",\r\n  \"indie\",\r\n  \"indie-pop\",\r\n  \"industrial\",\r\n  \"iranian\",\r\n  \"j-dance\",\r\n  \"j-idol\",\r\n  \"j-pop\",\r\n  \"j-rock\",\r\n  \"jazz\",\r\n  \"k-pop\",\r\n  \"kids\",\r\n  \"latin\",\r\n  \"latino\",\r\n  \"malay\",\r\n  \"mandopop\",\r\n  \"metal\",\r\n  \"metal-misc\",\r\n  \"metalcore\",\r\n  \"minimal-techno\",\r\n  \"movies\",\r\n  \"mpb\",\r\n  \"new-age\",\r\n  \"new-release\",\r\n  \"opera\",\r\n  \"pagode\",\r\n  \"party\",\r\n  \"philippines-opm\",\r\n  \"piano\",\r\n  \"pop\",\r\n  \"pop-film\",\r\n  \"post-dubstep\",\r\n  \"power-pop\",\r\n  \"progressive-house\",\r\n  \"psych-rock\",\r\n  \"punk\",\r\n  \"punk-rock\",\r\n  \"r-n-b\",\r\n  \"rainy-day\",\r\n  \"reggae\",\r\n  \"reggaeton\",\r\n  \"road-trip\",\r\n  \"rock\",\r\n  \"rock-n-roll\",\r\n  \"rockabilly\",\r\n  \"romance\",\r\n  \"sad\",\r\n  \"salsa\",\r\n  \"samba\",\r\n  \"sertanejo\",\r\n  \"show-tunes\",\r\n  \"singer-songwriter\",\r\n  \"ska\",\r\n  \"sleep\",\r\n  \"songwriter\",\r\n  \"soul\",\r\n  \"soundtracks\",\r\n  \"spanish\",\r\n  \"study\",\r\n  \"summer\",\r\n  \"swedish\",\r\n  \"synth-pop\",\r\n  \"tango\",\r\n  \"techno\",\r\n  \"trance\",\r\n  \"trip-hop\",\r\n  \"turkish\",\r\n  \"work-out\",\r\n  \"world-music\"\r\n];\r\nconsole.log(appurl);\r\n\r\nexport { appurl, appurl_refresh, genre };\r\n","import { useState, useEffect } from \"react\";\r\nimport { getHashParams, useGetDevice } from \"./service\";\r\nimport { appurl /*, appurl_refresh */ } from \"./data\";\r\nimport SpotifyWebApi from \"spotify-web-api-js\";\r\nimport { getUserData, updateData } from \"../services/firebase_service\";\r\n//var querystring = require(\"querystring\");\r\n\r\nconst spotifyApi = new SpotifyWebApi();\r\n\r\nfunction useAccessToken() {\r\n  const params = getHashParams();\r\n  const [loggedIn, setloggedIn] = useState(false);\r\n  const [access_token /*, setaccess_token*/] = useState(\r\n    localStorage.getItem(\"access_token\") || params.access_token || \"\"\r\n  );\r\n  const [refresh_token /*, setRefresh_token*/] = useState(\r\n    localStorage.getItem(\"refresh_token\") || params.refresh_token || \"\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    /*\r\n    if (access_token) getAccessToken(access_token, data => console.log(data));\r\n    if (refresh_token)\r\n      fetch(\r\n        appurl_refresh +\r\n          querystring.stringify({\r\n            refresh_token\r\n          })\r\n      )\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          //console.log(data);\r\n          setaccess_token(data.access_token);\r\n          localStorage.setItem(\"access_token\", data.access_token);\r\n        }); //localStorage.removeItem(\"refresh_token\");\r\n        */\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (access_token) {\r\n      spotifyApi.setAccessToken(access_token);\r\n      localStorage.setItem(\"access_token\", access_token);\r\n      localStorage.setItem(\"refresh_token\", refresh_token);\r\n    }\r\n    setloggedIn(access_token ? true : false);\r\n  }, [access_token, refresh_token]);\r\n  return loggedIn;\r\n}\r\nconst useGetMe = () => {\r\n  const [me, setme] = useState({});\r\n  useEffect(() => {\r\n    spotifyApi.getMe().then(user => {\r\n      setme(user);\r\n    });\r\n  }, []);\r\n  return [me];\r\n};\r\nconst useGetNowPlaying = () => {\r\n  const [nowPlaying, setnowPlaying] = useState({\r\n    name: \"\",\r\n    artist: \"\",\r\n    albumArt: \"\",\r\n    is_playing: false,\r\n    uri: \"\",\r\n    id: \"\"\r\n  });\r\n  const [current, setcurrent] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getCurrent();\r\n    const interval = setInterval(() => getCurrent(), 3000);\r\n    function getCurrent() {\r\n      spotifyApi.getMyCurrentPlaybackState((err, response) => {\r\n        if (err) {\r\n          setError(true);\r\n          clearInterval(interval);\r\n          eliminar();\r\n          console.error(err);\r\n        } else {\r\n          setError(false);\r\n          setcurrent(response ? response.is_playing : false);\r\n\r\n          if (response.item && response.currently_playing_type !== \"episode\") {\r\n            setnowPlaying({\r\n              name: response.item.name,\r\n              albumArt: response.item.album.images[0].url,\r\n              is_playing: response.is_playing,\r\n              uri: response.item.uri,\r\n              id: response.item.id,\r\n              artist: response.item.artists[0].name\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return [nowPlaying, error, current];\r\n};\r\n\r\nconst useRecomendation = (nowPlaying, state, genre) => {\r\n  const [recomendation, setrecomendation] = useState([]);\r\n  const [musicsaved] = useCallsaveData();\r\n\r\n  useEffect(() => {\r\n    const genreSwitch = genre => {\r\n      if (genre) return { seed_genres: genre };\r\n      return {};\r\n    };\r\n    const seed_tracks_fun = () => {\r\n      if (musicsaved) {\r\n        if (musicsaved.length === 0) return {};\r\n        const seed_tracks_ = `${musicsaved.join(\",\")}${\r\n          nowPlaying.id ? \",\" + nowPlaying.id : \"\"\r\n        }`;\r\n        if (seed_tracks_) return { seed_tracks: seed_tracks_ };\r\n      }\r\n\r\n      return {};\r\n    };\r\n\r\n    const valence = state => {\r\n      //if (genreSwitch) return {};\r\n      if (state === 0)\r\n        return {\r\n          min_valence: 0,\r\n          max_valence: 1\r\n        };\r\n      if (state === 1)\r\n        return {\r\n          min_valence: 0.5,\r\n          max_valence: 1\r\n        };\r\n      if (state === 2)\r\n        return {\r\n          min_valence: 0,\r\n          max_valence: 0.5\r\n        };\r\n      if (state === 3)\r\n        return {\r\n          min_valence: 0,\r\n          max_valence: 1\r\n        };\r\n    };\r\n\r\n    const finalOptions = {\r\n      ...seed_tracks_fun(),\r\n      ...valence(state),\r\n      ...genreSwitch(genre)\r\n    };\r\n    spotifyApi\r\n      .getRecommendations({\r\n        limit: 15,\r\n        market: \"PE\",\r\n        //seed_artists: \"4NHQUGzhtTLFvgF5SZesLK\",\r\n        ...finalOptions\r\n        //min_energy: 0.9,\r\n        //popularity: 0.9\r\n      })\r\n      .then(data => {\r\n        setrecomendation(data.tracks);\r\n      });\r\n  }, [state, genre /*, nowPlaying.id */, musicsaved]);\r\n  return [recomendation];\r\n};\r\nconst useCallsaveData = () => {\r\n  const [musicsaved, setmusicsaved] = useState([]);\r\n  useEffect(() => {\r\n    spotifyApi\r\n      .getMySavedTracks({ limit: 4, offset: 0, market: \"PE\" })\r\n      .then(data => {\r\n        /*\r\n        const parsedata = data.items.map(item => {\r\n          return { added_at: item.added_at, ...item.track };\r\n        });*/\r\n        const newdata = data.items.map(item => item.track.id);\r\n        setmusicsaved(newdata);\r\n      });\r\n  }, []);\r\n  return [musicsaved];\r\n};\r\n\r\nconst useGetAudio = nowPlaying => {\r\n  const [audiodetail, setaudiodetail] = useState({});\r\n  useEffect(() => {\r\n    if (nowPlaying.id) {\r\n      spotifyApi\r\n        .getAudioFeaturesForTrack(nowPlaying.id)\r\n        .then(audiodetail => setaudiodetail(audiodetail));\r\n    }\r\n  }, [nowPlaying.id]);\r\n  return [audiodetail];\r\n};\r\nconst useGetPlaylist = () => {\r\n  const [me] = useGetMe();\r\n  const [playlist, setplaylist] = useState([]);\r\n  const [exist, setexist] = useState(0);\r\n  useEffect(() => {\r\n    if (me) {\r\n      spotifyApi.getUserPlaylists(me.id, { limit: 50 }).then(device => {\r\n        setplaylist(device.items);\r\n      });\r\n    }\r\n  }, [me]);\r\n\r\n  useEffect(() => {\r\n    if (playlist.length > 0) {\r\n      var read_cookies = document.cookie;\r\n      var split_read_cookie = read_cookies.split(\";\");\r\n      var parse = split_read_cookie.map(a => {\r\n        let dat = a.split(\"=\");\r\n        return { name: dat[0], data: dat[1] };\r\n      });\r\n      let cock_playlist = parse.find(o => o.name === \" playlist_id\");\r\n\r\n      let obj = playlist.find(o => o.name === \"Domo Playlist\");\r\n      setexist(obj ? 1 : 2);\r\n      if (obj) localStorage.setItem(\"playlist_id\", obj.id);\r\n      if (cock_playlist)\r\n        localStorage.setItem(\"playlist_id\", cock_playlist.data);\r\n      // alert(localStorage.getItem(\"playlist_id\"));\r\n    }\r\n  }, [me.id, playlist]);\r\n  return [exist];\r\n};\r\nconst useCreatePlaylist = () => {\r\n  const [me] = useGetMe();\r\n  //const [exist] = useGetPlaylist();\r\n\r\n  const [playlist_id, setplaylist_id] = useState(null);\r\n  const [playlist, setplaylist] = useState({});\r\n  useEffect(() => {\r\n    if (playlist_id) localStorage.setItem(\"playlist_id\", playlist_id);\r\n  }, [playlist_id]);\r\n  useEffect(() => {\r\n    if (me) {\r\n      getUserData(me, (data, err) => {\r\n        if (data) {\r\n          if (data.playlist_id) {\r\n            spotifyApi.getPlaylist(data.playlist_id).then(dataGet => {\r\n              if (dataGet.id) {\r\n                setplaylist(dataGet);\r\n                setplaylist_id(dataGet.id);\r\n              } else {\r\n                updateData(me, { playlist_id: \"\" }, (body, err) =>\r\n                  console.log(body, err)\r\n                );\r\n              }\r\n            });\r\n          } else\r\n            spotifyApi\r\n              .createPlaylist(me.id, {\r\n                name: \"Domo Playlist\",\r\n                public: false,\r\n                collaborative: false,\r\n                description: \"Playlist de musica recomendada\"\r\n              })\r\n              .then(device => {\r\n                updateData(me, { playlist_id: device.id }, (body, err) =>\r\n                  console.log(body, err)\r\n                );\r\n                setplaylist_id(device.id);\r\n                setplaylist(device);\r\n              });\r\n        }\r\n      });\r\n    }\r\n  }, [me]);\r\n\r\n  /*\r\n  useEffect(() => {\r\n    if (!me.id) return console.log(\"esperando usuario\");\r\n\r\n    if (playlist_id)\r\n      spotifyApi.getPlaylist(playlist_id).then(a => {\r\n        console.log(a);\r\n        setplaylist(a);\r\n        setplaylist_id(a.id);\r\n      });\r\n    else\r\n      spotifyApi\r\n        .createPlaylist(me.id, {\r\n          name: \"Domo Playlist\",\r\n          public: false,\r\n          collaborative: true,\r\n          description: \"Playlist de musica Recomendada\"\r\n        })\r\n        .then(device => {\r\n          localStorage.setItem(\"playlist_id\", device.id);\r\n          setplaylist_id(device);\r\n        });\r\n  }, [me.id]);\r\n*/\r\n  return [playlist];\r\n};\r\nfunction addtoPlaylist(playlist_id, uri) {\r\n  console.log(playlist_id, uri);\r\n  spotifyApi.addTracksToPlaylist(playlist_id, [uri]).then(device => {\r\n    console.log(device);\r\n    spotifyApi.play();\r\n    alert(\"Se añadio con exito\");\r\n  });\r\n}\r\nfunction eliminar() {\r\n  localStorage.removeItem(\"access_token\");\r\n  localStorage.removeItem(\"refresh_token\");\r\n  //localStorage.removeItem(\"playlist_id\");\r\n  // document.cookie = \"playlist_id\" + \"=; Max-Age=0\";\r\n}\r\n/*\r\n\r\nfunction getAudioFeaturesForTrack(data) {\r\n  const tracks = [];\r\n  data.map(track => {\r\n    spotifyApi.getAudioFeaturesForTrack(track.id, (err, audiodetail) => {\r\n      console.log(Object.assign({}, track, audiodetail));\r\n      tracks.push(Object.assign({}, track, audiodetail));\r\n      return Object.assign({}, track, audiodetail);\r\n    });\r\n  });\r\n  \r\n  if (data.length === tracks.length) return tracks;\r\n  else return data;\r\n}\r\n*/\r\n/*\r\nconst getSearch = () => {\r\n  spotifyApi.search(\"WONDERLAND\", [\"track\"], { market: \"PE\" }).then(device => {\r\n    console.log(device);\r\n  });\r\n};\r\nconst createPlaylist = () => {\r\n  spotifyApi\r\n    .createPlaylist(me.id, {\r\n      name: \"Creado desde el server\",\r\n      public: false,\r\n      description: \"esta lpaylist es la recomendada\"\r\n    })\r\n    .then(device => {\r\n      console.log(device);\r\n    });\r\n};\r\nconst addToPlaylist = () => {\r\n  if (nowPlaying.uri)\r\n    spotifyApi\r\n      .addTracksToPlaylist(\"06sL90oZx5lI8mbaGzlgFD\", [nowPlaying.uri])\r\n      .then(device => {\r\n        console.log(device);\r\n      });\r\n};\r\nconst removeToPlaylist = () => {\r\n  if (nowPlaying.uri)\r\n    spotifyApi\r\n      .removeTracksFromPlaylist(\"06sL90oZx5lI8mbaGzlgFD\", [nowPlaying.uri])\r\n      .then(device => {\r\n        console.log(device);\r\n      });\r\n};\r\n*/\r\n\r\nexport {\r\n  appurl,\r\n  useAccessToken,\r\n  useGetMe,\r\n  useGetNowPlaying,\r\n  useGetDevice,\r\n  useGetAudio,\r\n  useRecomendation,\r\n  addtoPlaylist,\r\n  useGetPlaylist,\r\n  useCreatePlaylist\r\n  /*,\r\n  getSearch,\r\n  createPlaylist,\r\n  addToPlaylist,\r\n  removeToPlaylist\r\n  */\r\n};\r\n/*\r\n\r\n\r\n*/\r\n","import React from \"react\";\r\nimport \"./card.scss\";\r\nexport default ({ children, normal }) => {\r\n  return <div className={`${normal && \"normal\"} card `}>{children}</div>;\r\n};\r\n","import React from \"react\";\r\nimport \"./href.scss\";\r\nexport default ({ children, href, newtab, button, onClick }) => {\r\n  if (button && onClick)\r\n    return (\r\n      <button className=\"button-domo\" onClick={onClick}>\r\n        {children}\r\n      </button>\r\n    );\r\n  return (\r\n    <a href={href} target={newtab ? \"_blank\" : \"_self\"} className=\"button-domo\">\r\n      {children}\r\n    </a>\r\n  );\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/Happy.d51ce461.svg\";","module.exports = __webpack_public_path__ + \"static/media/Sad.28aa5087.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cool.13d79071.svg\";","module.exports = __webpack_public_path__ + \"static/media/DOMO.554d941c.svg\";","module.exports = __webpack_public_path__ + \"static/media/Logo.75f61d59.svg\";","import React from \"react\";\r\nimport Happy from \"../files/Happy.svg\";\r\nimport Sad from \"../files/Sad.svg\";\r\nimport Cool from \"../files/Cool.svg\";\r\nimport \"./Emoji.scss\";\r\n\r\nexport default ({ state, onClick }) => {\r\n  const emoji = state => {\r\n    if (state === 1) return Happy;\r\n    if (state === 2) return Sad;\r\n    if (state === 3) return Cool;\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <button className=\"buttonStyle\" onClick={onClick}>\r\n      <img src={emoji(state)} alt={\"emotion\"} className=\"EmojiStyle\"></img>\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./cover.scss\";\r\n\r\nconst coverStyle = {\r\n  boxShadow: \" 7px 7px 9px rgba(0, 0, 0, 0.2)\",\r\n  height: 250\r\n};\r\nexport default ({ nowPlaying, is_playing }) => {\r\n  return (\r\n    <img\r\n      alt={nowPlaying.name}\r\n      src={nowPlaying.albumArt}\r\n      style={coverStyle}\r\n      className={is_playing ? `coverActive` : `coverDeactivated`}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./who.scss\";\r\nconst WhoStyle = {\r\n  margin: \"10px\"\r\n};\r\nexport default ({ name, artist }) => {\r\n  return (\r\n    <div style={WhoStyle}>\r\n      <h2>{name} </h2>\r\n      <h3>{artist}</h3>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect, Suspense, lazy } from \"react\";\nimport \"./App.css\";\nimport Card from \"./components/card\";\nimport Link from \"./components/ahref\";\nimport Emoji from \"./components/emoji\";\n/*\nimport Title from \"./components/title\";\n*/\nimport Cover from \"./components/cover\";\nimport Who from \"./components/who\";\nimport Domo from \"./files/DOMO.svg\";\nimport Logo from \"./files/Logo.svg\";\n//import Recomendation from \"./pages/recomendation\";\n\nimport {\n  appurl,\n  useGetNowPlaying,\n  useAccessToken,\n  useGetMe\n} from \"./hooks/User\";\nimport { PostTransition } from \"./services/firebase_service\";\n\nconst imgStyle = {\n  margin: \"20px\"\n};\nconst Recomendation = lazy(() => import(\"./pages/recomendation\"));\n\nfunction App() {\n  //const [playlist_id] = useCreatePlaylist();\n\n  const loggedIn = useAccessToken();\n  const [state, setState] = useState(0);\n  const [now, setNow] = useState(null);\n  const [nowPlaying, error] = useGetNowPlaying();\n  const [me] = useGetMe();\n\n  useEffect(() => {\n    if (!now || state === 0) {\n      console.log(!now || state === 0);\n    } else if (me) {\n      PostTransition(me, now, state);\n      //console.log(me);\n    }\n  }, [now, state, me]);\n\n  /// const [devices] = useGetDevice(nowPlaying);\n  //const [audiodetail] = useGetAudio(nowPlaying);\n\n  //const recomendationPlus = useRecomendationPlus(state);\n\n  /*\n  const recomendacionPlus = recomendationPlus.map((music, indexaudio) => (\n    <List\n      key={music.id}\n      artist={music.artists[0].name}\n      name={music.name}\n      src={music.album.images[0].url}\n      preview_url={music.preview_url}\n      valence={music.valence}\n    />\n  ));\n  console.log(!loggedIn, error);\n  */\n\n  if (!loggedIn || error) {\n    return (\n      <div className=\"App-header\">\n        <Card>\n          <p>\n            <img src={Domo} alt=\"texto\" style={imgStyle}></img>\n          </p>\n          <p>\n            <img src={Logo} alt=\"Logo Domo\" style={imgStyle}></img>\n          </p>\n          <Link href={appurl} style={imgStyle}>\n            Iniciar sesion con spotify\n          </Link>\n        </Card>\n      </div>\n    );\n  }\n  return (\n    <div className=\"App-header\">\n      {nowPlaying.name && (\n        <Card normal>\n          <h3 style={{ textAlign: \"left\" }}>Ahora reproduciendo:</h3>\n          <Cover\n            is_playing={nowPlaying.is_playing}\n            nowPlaying={nowPlaying}\n          ></Cover>\n\n          <Who name={nowPlaying.name} artist={`${nowPlaying.artist} `}></Who>\n        </Card>\n      )}\n      <Card normal={!now}>\n        {state !== 0 && (\n          <Link\n            button\n            onClick={() => {\n              setNow(null);\n              setState(0);\n            }}\n          >\n            Volver a escoger\n          </Link>\n        )}\n\n        {!now ? (\n          <>\n            <h2>¿Como te sientes ahora?</h2>\n            <Emoji onClick={() => setNow(1)} state={1}></Emoji>\n\n            <Emoji onClick={() => setNow(2)} state={2}></Emoji>\n          </>\n        ) : (\n          state === 0 && (\n            <>\n              <h2>¿Como te quieres sentir ?</h2>\n              <Emoji onClick={() => setState(1)} state={1}></Emoji>\n              <Emoji onClick={() => setState(3)} state={3}></Emoji>\n              <Emoji onClick={() => setState(2)} state={2}></Emoji>\n            </>\n          )\n        )}\n      </Card>\n\n      {now && state !== 0 && (\n        <Suspense fallback={<></>}>\n          <Recomendation nowPlaying={nowPlaying} state={state} />\n        </Suspense>\n      )}\n    </div>\n  );\n}\n/*\n  return (\n    <div className=\"App-header\">\n      {nowPlaying.name && loggedIn ? (\n        <Title>Ahora reproduciendo</Title>\n      ) : (\n        <>\n          <Card>\n            <p className=\"Title\">Ponle play para recomendarte</p>\n          </Card>\n        </>\n      )}\n    </div>\n  );\n}\n*/\nexport default App;\n/*\n{nowPlaying.name && !current && (\n        <Card normal>\n          <p className=\"Title\">Ponle play para recomendarte</p>\n          <Who\n            name={nowPlaying.name}\n            artist={`${nowPlaying.artist}  ${audiodetail.valence}`}\n          ></Who>\n        </Card>\n      )}\n      {nowPlaying.name && current && (\n        <Card normal>\n          <Who\n            name={nowPlaying.name}\n            artist={`${nowPlaying.artist} ${audiodetail.valence}`}\n          ></Who>\n        </Card>\n      )}\n      {nowPlaying.name && (\n        <Card>\n          <h2>¿Como te quieres sentir ?</h2>\n          <Emoji onClick={() => setState(1)} state={true}></Emoji>\n          <Emoji onClick={() => setState(2)} state={false}></Emoji>\n        </Card>\n      )}\n*/\n/*\n <Card>\n        <Slider min={0} max={1} defaultValue={1} handle={handle} step={0.2} />\n      </Card>\n      <CircularProgressbar\n        value={percentage}\n        className=\"progress\"\n        styles={buildStyles({\n          rotation: 0.25,\n          strokeLinecap: \"round\",\n          pathTransitionDuration: 0.5,\n\n          pathColor: `#F27A54`,\n          trailColor: \"transparent\"\n        })}\n      ></CircularProgressbar>\n\n        {me.display_name && \"hola \" + me.display_name}\n\n        {devices.length > 0 &&\n          \"se encontro \" + devices.length + \" dispositivos\"}\n        {devices.map(device => (\n          <li key={device.id}>\n            {device.name} {device.tylie}\n          </li>\n        ))}\n   <p>acousticness- {audiodetail.acousticness}</p>\n\n            <p>danceability- {audiodetail.danceability}</p>\n            <p>duration_ms- {audiodetail.duration_ms}</p>\n            <p>energy- {audiodetail.energy}</p>\n            <p>instrumentalness- {audiodetail.instrumentalness}</p>\n            <p>key- {audiodetail.key}</p>\n            <p>liveness- {audiodetail.liveness}</p>\n            <p>loudness- {audiodetail.loudness}</p>\n            <p>duration_ms- {audiodetail.duration_ms}</p>\n            <p>mode- {audiodetail.mode}</p>\n            <p>speechiness- {audiodetail.speechiness}</p>\n            <p>tempo- {audiodetail.tempo}</p>\n            <p>time_signature- {audiodetail.time_signature}</p>\n            <p>valence- {audiodetail.valence}</p>\n\n\n     \n      {loggedIn && (\n        <>\n          <button onClick={() => getSearch()}>Search</button>\n          <button onClick={() => createPlaylist()}>createPlaylist</button>\n        </>\n      )}\n      {nowPlaying.uri && (\n        <>\n          <button onClick={() => getRecomendation()}>Get Recomendacion</button>\n          <button onClick={() => getAudio()}>getAudio</button>\n          <button onClick={() => addToPlaylist()}>addToPlaylist</button>\n          <button onClick={() => removeToPlaylist()}>removeToPlaylist</button>\n        </>\n      )}\n     \n      {devices.map(device => (\n        <p key={device.id}>\n          {device.name} {device.type}\n        </p>\n      ))}\n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"34.68.6.184\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}