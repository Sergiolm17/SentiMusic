{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["spotifyApi","SpotifyWebApi","getHashParams","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","App","params","useState","loggedIn","setloggedIn","devices","setdevices","me","setme","name","albumArt","is_playing","uri","id","nowPlaying","setnowPlaying","useEffect","token","access_token","setAccessToken","getMe","then","user","console","log","href","display_name","alt","src","style","height","onClick","getMyCurrentPlaybackState","response","item","album","images","url","getMyDevices","device","search","market","createPlaylist","public","description","getRecommendations","limit","seed_tracks","min_energy","min_popularity","getAudioFeaturesForTrack","addTracksToPlaylist","removeTracksFromPlaylist","length","map","key","type","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b941bf4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nconst spotifyApi = new SpotifyWebApi();\n\nfunction App() {\n  const params = getHashParams();\n  const [loggedIn, setloggedIn] = useState(false);\n  const [devices, setdevices] = useState([]);\n  const [me, setme] = useState({});\n\n  const [nowPlaying, setnowPlaying] = useState({\n    name: \"\",\n    albumArt: \"\",\n    is_playing: false,\n    uri: \"\",\n    id: \"\"\n  });\n\n  useEffect(() => {\n    const token = params.access_token;\n\n    if (token) {\n      spotifyApi.setAccessToken(token);\n      getMe();\n    }\n\n    setloggedIn(token ? true : false);\n  }, [params.access_token]);\n  const getNowPlaying = () => {\n    spotifyApi.getMyCurrentPlaybackState().then(response => {\n      console.log(response);\n      if (response)\n        setnowPlaying({\n          name: response.item.name,\n          albumArt: response.item.album.images[0].url,\n          is_playing: response.is_playing,\n          uri: response.item.uri,\n          id: response.item.id\n        });\n    });\n  };\n  const getMe = () => {\n    spotifyApi.getMe().then(user => {\n      console.log(user);\n      setme(user);\n    });\n  };\n  const getDevice = () => {\n    spotifyApi.getMyDevices().then(device => {\n      console.log(device);\n\n      setdevices(device.devices);\n    });\n  };\n  const getRecomendation = () => {\n    if (nowPlaying.id)\n      spotifyApi\n        .getRecommendations({\n          limit: 10,\n          market: \"PE\",\n          //seed_artists: \"4NHQUGzhtTLFvgF5SZesLK\",\n          seed_tracks: nowPlaying.id,\n          min_energy: 0.4,\n          min_popularity: 50\n        })\n        .then(device => {\n          console.log(device);\n        });\n  };\n  const getAudio = () => {\n    if (nowPlaying.id)\n      spotifyApi.getAudioFeaturesForTrack(nowPlaying.id).then(device => {\n        console.log(device);\n      });\n  };\n  const getSearch = () => {\n    spotifyApi\n      .search(\"WONDERLAND\", [\"track\"], { market: \"PE\" })\n      .then(device => {\n        console.log(device);\n      });\n  };\n  const createPlaylist = () => {\n    spotifyApi\n      .createPlaylist(me.id, {\n        name: \"Creado desde el server\",\n        public: false,\n        description: \"esta lpaylist es la recomendada\"\n      })\n      .then(device => {\n        console.log(device);\n      });\n  };\n  const addToPlaylist = () => {\n    if (nowPlaying.uri)\n      spotifyApi\n        .addTracksToPlaylist(\"06sL90oZx5lI8mbaGzlgFD\", [nowPlaying.uri])\n        .then(device => {\n          console.log(device);\n        });\n  };\n  const removeToPlaylist = () => {\n    if (nowPlaying.uri)\n      spotifyApi\n        .removeTracksFromPlaylist(\"06sL90oZx5lI8mbaGzlgFD\", [nowPlaying.uri])\n        .then(device => {\n          console.log(device);\n        });\n  };\n\n  return (\n    <div>\n      {!loggedIn && (\n        <a href=\"https://sentimusic.herokuapp.com/login\"> Login to Spotify </a>\n      )}\n      {me.display_name && \"hola \" + me.display_name}\n\n      {nowPlaying && (\n        <div>\n          Ahora reproduciendo: {nowPlaying.name}\n          <img\n            alt={nowPlaying.name}\n            src={nowPlaying.albumArt}\n            style={{ height: 150 }}\n          />\n        </div>\n      )}\n      {loggedIn && (\n        <>\n          <button onClick={() => getNowPlaying()}>Ahora reproduciendo</button>\n          <button onClick={() => getDevice()}>Get Device</button>\n          <button onClick={() => getSearch()}>Search</button>\n          <button onClick={() => createPlaylist()}>createPlaylist</button>\n        </>\n      )}\n      {nowPlaying.uri && (\n        <>\n          <button onClick={() => getRecomendation()}>Get Recomendacion</button>\n          <button onClick={() => getAudio()}>getAudio</button>\n          <button onClick={() => addToPlaylist()}>addToPlaylist</button>\n          <button onClick={() => removeToPlaylist()}>removeToPlaylist</button>\n        </>\n      )}\n      <p>\n        {devices.length > 0 &&\n          \"se encontro \" + devices.length + \" dispositivos\"}\n      </p>\n      {devices.map(device => (\n        <p key={device.id}>\n          {device.name} {device.type}\n        </p>\n      ))}\n    </div>\n  );\n}\nconst getHashParams = () => {\n  var hashParams = {};\n  var e,\n    r = /([^&;=]+)=?([^&;]*)/g,\n    q = window.location.hash.substring(1);\n  e = r.exec(q);\n  while (e) {\n    hashParams[e[1]] = decodeURIComponent(e[2]);\n    e = r.exec(q);\n  }\n  return hashParams;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}